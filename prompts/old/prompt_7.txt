Your task is to convert the natural language requirements into LESS requirements. The LESS formatted Specifications are controlled language requirements that follow the following textX grammar:
LESS requirement:
        (conditionals=Conditionals)?
        (attribut= attribut_of_subject)?
        subject+=System_families*
        obligation=Degree_of_obligation 
        activity=System_activities 
        (attribut=attribut_of_subject)?
        (object+=Objects*)?
        (external_condition = External_condition)?
        (relax=Relaxes)?
        '.'?
        ;
optional:
        Objects | External_condition | Relaxes
        ;

Transition:
        (( 'FROM' (':')? (from_state=[State | ERID] | from_st = STRING))? (
        'TO' (':')? (to_state=[State | ERID] | to_st = STRING))?)
        ;

Conditionals:
        logical_conditional | state_conditional | behavior_conditional
        ;
System_families:
        specific_subject | set_of_components
        ;
specific_subject:
        ('THE' | 'ANY')? (subject=Subject | subject = STRING) ('OF'|'BY
        USING'| 'FROM' | 'FOR' | 'IN' | 'AGAINST' |
        'TO' | 'WITH' | 'EXCEPT FOR' | ('WHICH' | 'THAT') verb=[Verb|ERID] )?
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;
set_of_components:
        ('ALL' | 'SOME')? 'SYSTEMS' 'OF' 'THE' (subject=Subject | subject =
        STRING) ('OF'|'BY USING' | 'FROM' | 'FOR' | 'IN' | 'AGAINST' |
        'TO' | 'WITH' | 'EXCEPT FOR' | ('WHICH' | 'THAT') verb=[Verb|ERID])?
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;
Subject:
        (sub = [Component | ERID] | sub = [Error | ERID] | sub =[Req_object |
        ERID] | sub = [Variable | ERID])
        ;
attribut_of_subject:
        ((attr = [ObjectAttribute | ERID]) * ['AND'] )?
        ;
Degree_of_obligation:
        'SHALL' ('NOT')?
        ;
System_activities:
        provide_activity | be_able_activity | process_verb | (STRING) * ['AND']
        ;
Objects:
        specific_object | unspecific_object | all_objects | each_object
        ;

logical_conditional:
        'IF' ('NOT')? ('(')? ( condition=STRING | condition+=logical_expression+ ) (')')? ('THEN')? ('Comment:'comm= [Commentary | ERID])? (Comment1)?
;
state_conditional:
        ('WHILE' | 'DURING') (activation_state += logical_expression+ | activation_state = STRING) ('THEN')? ('Comment:'comm= [Commentary | ERID])? (Comment1)?
;
behavior_conditional:
        ('AFTER' | 'BEFORE' | 'AS' 'SOON' 'AS' | 'IN' 'CASE' 'OF') (behavior += logical_expression+ | behavior = STRING ) 
        //('WAS' | 'IS')? ((attr = [ObjectAttribute | ERID]) * ['AND'] )?
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
;
Behavior:
        (Transition | bool_math_expr| beh=[State|ERID] | beh=[Variable|ERID] | beh=[Event|ERID] | beh = [Component | ERID] | beh =[Req_object | ERID] | beh = [Error |ERID] | beh = [Condition |ERID] ) ('WAS' | 'IS')? ((attr = [ObjectAttribute | ERID]) * ['AND'] )?
;

provide_activity:
'PROVIDE'
        (pract=[Component] | pract=[Variable] | pract =[Req_object | ERID] |pract=[Set] | provide_obj=STRING)* ['AND'] 
        ('WITH' 'THE' 'ABILITY')? ('TO')?
        (process=process_verb | verb=[Verb|ERID] |provide_verb=STRING)?
        (transition=Transition)?
        (('FROM' (sender=Subject | send = STRING)) |
        ('TO' (reveiver=Subject | rev = STRING)))?
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;
be_able_activity:
        'BE' 'ABLE' 'TO'
        (process_verb=process_verb | verb=[Verb|ERID] |be_able_verb = STRING )*
        ['AND'] (Transition)?
        (('FROM' (sender=Subject | send = STRING)) |
        ('TO' (reveiver=Subject | rev = STRING)))?
        ('Comment:'comm=Commentary )? (Comment1)?
        ;
process_verb:
        ('ENSURE' | 'DETECT' | 'SWITCH' | 'ALLOW' | 'PREVENT' ('FROM')? |
        'CHECK' | verb = [Verb|ERID] )*
        ['AND']
        (Transition)?
        (('FROM' (sender=Subject | send = STRING)) |
        ('TO' (reveiver=Subject | rev = STRING)))?
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;

unspecific_object:
        ('A' | 'AN') (object = obj | object = STRING) ('OF' | 'BY' 'USING' |
        'FROM' | 'FOR' | 'IN' | 'AGAINST' |
        'TO' | 'WITH' | 'EXCEPT FOR' | ('WHICH' | 'THAT') verb=[Verb|ERID])?
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;
specific_object:
        ('THE'| 'ANY')? (':')? (object = obj | object = STRING) ('OF' | 'BY'
        'USING' | 'FROM' | 'FOR' | 'IN' | 'AGAINST' |
        'TO' | 'WITH' | 'EXCEPT FOR' | ('WHICH' | 'THAT') verb=[Verb|ERID])?
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;
all_objects:
        'ALL' 'THE' (object = obj | object = STRING) ('OF' | 'BY' 'USING' |
        'FROM' | 'FOR' | 'IN' | 'AGAINST' |
        'TO' | 'WITH' | 'EXCEPT FOR' | ('WHICH' | 'THAT') verb=[Verb|ERID])?
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;
each_object:
        'EACH' (object = obj | object = STRING) ('OF' | 'BY' 'USING' | 'FROM'
        | 'FOR' | 'IN' | 'AGAINST' |
        'TO' | 'WITH' | 'EXCEPT FOR' | ('WHICH' | 'THAT') verb=[Verb|ERID])?
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;
obj:
        (ob = [Component | ERID] | ob = [Variable | ERID] |ob =[Req_object |
        ERID] | ob= [Error | ERID] | ob = [Set | ERID])
        ;
External_condition:
        ('IF' 'AND' 'ONLY' 'IF') ('NOT')? (external_condition+=logical_literal+
        | external_condition=STRING)
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;

Relaxes:
        until_event |within_time_interval
        ;
until_event:
        'UNTIL'
        (until_event=[Event|ERID] | until_ev = STRING)
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;
within_time_interval:
        'WITHIN'
        (interval= Time_Interval)
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;
logical_literal:
        bool_state_expr | behav=Behavior
        ;
bool_math_expr:
        (var1 = [Variable | ERID] boolop = bool_operator+ (var2 = INT | var3 =
        [Variable | ERID]))
        ;
bool_state_expr:
        ('(')? (sub += [ Component | ERID]* ['AND']| sub+=[Variable|ERID]*
        ['AND'] | sub+=[Req_object |ERID]* ['AND']) (')')?
        'IN' state=[State|ERID] ('STATE')?
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;
State_expr:
        state=[State | ERID] | STRING |'ANY'
        ;
bool_var_in_set_expr:
        'IN' set=[Set|ERID]
        ;
bool_event_triggerd:
        event=[Event|ERID] 'IS' ('NOT')? 'TRIGGERED'
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;
Operator:
        math_operator | bool_operator
        ;
bool_math_var:
        (event=[Event|ERID] | state= [State|ERID] | var=[Variable|ERID] |
        set=[Set|ERID] | Number | STRING)
        ;
logical_expression:
        ('NOT')? lit = logical_literal ('AND')?
        ('Comment:'comm= [Commentary | ERID])? (Comment1)?
        ;
// Operators
bool_operator:
        ('LESS' 'THAN') | ('GREATER' 'THAN') | ('EQUAL' 'TO')
        ;
math_operator:
        ('+'|'-'|'*'|'/'|'%'|'^')
        ;
Variable: name=ERID ('=' nr+=Number)* ;
Verb: name=ERID ;
Error: name=ERID ;
Time_Interval:
        time_value=Number
        time_unit=STRING
        ;
Number: INT | FLOAT ;
Set:
        name=ERID
        (':' '{'
        (
        ('Description' ':' description=STRING)? |
        (items?=Items?)?
        )#[',']
        '}')?
        ;
State_space:
        name=ERID
        (':' '['
        (
        (state+=[State|ERID]* [','])?
        )#[',']
        ']')?
        ;
Items:
        'Items' ':' '[' items += [Variable]*[','] ']'
        ;
ERID: !Keyword ID ;
        Description:
        'Description' ':' description=STRING
        ;
ObjectName:
        'ObjectName' ':' obj=STRING
        ;
Comment1:
        'Comment' ':' comm=STRING
        ;
Keyword:
        'Items' | 'NOT' | 'A' | 'AN' | 'THOSE' | 'LESS' | 'THAN' | 'EQUAL' |
        'GREATER' | 'FROM' | 'TO' |
        'IF' | 'AND' | 'OR' | 'ONLY' | 'IS' | 'IN'| 'INCLUDED' | 'TRIGGER' |
        'AS' | 'SOON' | 'POSSIBLE' |
        'BEFORE' | 'AFTER' | 'TRIGGERED' | 'SET' | 'STATE' | 'EVENT' | 'CASE' |
        'WHILE' | 'DURING' | 'EARLY' | 'LATE' |
        'WITHIN' | 'UNTIL' | 'ALL' | 'SOME' | 'THE' | 'SHALL' | 'SHOULD' |
        'COULD' | 'PROVIDE' | 'WITH' | 'ABILITY' |
        'ABLE' | 'TOWARDS' | 'EACH' | 'BETWEEN' | 'ALL' | 'MANY' | 'FEW' | 'AT'
        | 'LEAST' | 'EVENTUALLY' | 'CLOSE' |
        'ANY'| 'ENSURE' | 'WHICH'
        ;
Comment:
        /\/\*(.|\n)*?\*\//
        ;
only use below elements when using [Variable], [Component], [Verb], [ObjectAttribute], [State] when forming requirements. If there are [Variable], [Component], [Verb], [ObjectAttribute], [State] other than the ones mentioned below then replace them with below elements if they are synonyms. Always maintain same case letters for [Variables], [Components], [Verbs], [ObjectAttribute], and [Errors]
Variable: [
	systolic_pressure,
	diastolic_pressure,
	default_systolic_pressure,
	default_diastolic_pressure,
	diastolic_pressure_limit,
	start_test,
	pumps,
	message,
	description,
	compact_drive_first_switch,
	combination,
	last_values,
	ability,
	default_values_for_pressure_parameters,
	last_values_manual_mode,
	openenings_number,
	temperature_value_of_the_flow_sensors,
	temperature_of_compact_drive,
	acoustic_alarm,
	information_signal
],
Verb: [	start,
	pause,
	adjust,
	inform,
	display,
	count,
	signal,
	emit,
	receive,
	confirm,
	store,
	indicate,
	cancel
],
Error: [
	s4_error,
	s8_error,
	T3_alarm,
	s7_error,
	T2_alarm
],
Component: [
	compact_drive,
	user,
	clinical_ui,
	left_epu,
	right_epu,
	compact_drive_software,
	air_mass_balancing_valve,
	cannulae,
	system,
	power_supply_unit
],
ObjectAttribute:[
	engaged,
	current,
	invalid,
	selected,
	operated
],
State: [
	is_running,
	is_stopped,
	bvad_mode,
	lvad_mode,
	rvad_mode,
	logged_in,
	manual_mode,
	auto_mode,
	failed,
	setting,
	not_recomended_in_pcm,
	authorized,
	unauthorized,
	removed,
	active
]
You can use the following Json formatted examples to generate the results. The results should also be in same format as the samples below. Important: Do not include any additional text or notes outside of the JSON output. do not add any notes or any additional text other than json putput:
[
  {
    "nlp": "While the system is in bvad mode, it should allow the user to start the right EPU only if the left EPU is running.",
    "LESS": "WHILE bvad_mode THE system SHALL BE ABLE TO start THE right_epu IF AND ONLY IF left_epu IN is_running"
  },
  {
    "nlp": "In the clinical UI, switching from manual mode to auto mode should be possible only if the user is logged in.",
    "LESS": "THE clinical_ui SHALL BE ABLE TO SWITCH FROM manual_mode TO auto_mode IF AND ONLY IF user IN logged_in"
  },
  {
    "nlp": "The user should be able to modify the default systolic pressure before engaging the manual mode.",
    "LESS": "BEFORE manual_mode IS engaged THE user SHALL BE ABLE TO adjust THE default_systolic_pressure."
  },
  {
    "nlp": "If the system switches from manual mode to auto mode, it should adjust the diastolic pressure limit within 5 minutes.",
    "LESS": "IF FROM manual_mode TO auto_mode THE system SHALL adjust THE diastolic_pressure_limit WITHIN \"5 min\""
  },
  {
    "nlp": "The user should be able to check the current diastolic pressure of the sytem if it switches from the manual mode to the auto mode.",
    "LESS": "IF FROM manual_mode TO auto_mode THE user SHALL BE ABLE TO CHECK current diastolic_pressure"
  },
  {
    "nlp": "The clinical user interface should display the description of manual mode if manual mode is selected.",
    "LESS": "IF manual_mode IS selected THE clinical_ui SHALL display THE description OF manual_mode"
  },
  {
    "nlp": "If the compact_drive is in bvad mode and the right epu fails, the compact drive has to signal an S8 error.",
    "LESS": "IF bvad_mode AND right_epu IN failed STATE THE compact_drive SHALL signal A s8_error"
  }
]


Now, convert the following natural language requirement into a LESS requirement:

[
  {
    "nlp": " The system should allow the user to pause the left epu while in bvad_mode if and only if the right EPU is in the stopped state."
  },
  {
    "nlp": " The clinical user interface should allow switching from auto mode to manual mode if only if the user is logged in."
  },
  {
    "nlp": " The default diastolic pressure should be adjustable from user's side before the manual_mode is engaged."
  },
  {
    "nlp": "The system should check the default systolic pressure before engaging the manual_mode."
  },
  {
    "nlp": "The default diastolic pressure should be checked by the system before manual mode is engaged."
  },
  {
    "nlp": "If the system state changes from manual mode to auto mode, the user must be able to check the current systolic pressure."
  },
  {
    "nlp": "The user must be able to alter the current systolic pressure when system state changes from manual mode to auto mode."
  },
  {
    "nlp": "The user must be able to adjust the current systolic pressure if system state changes from manual mode to auto mode"
  },
  {
    "nlp": "If the system switches from manual mode to auto mode, the user should be able to adjust the current systolic pressure."
  },
  {
    "nlp": "If the compact drive first switches from auto mode to manual mode, the system should provide default values for pressure parameters with the ability to confirm."
  },
  {
    "nlp": "The system should provide last values manual mode with the ability to confirm if the compact drive was operated from auto mode to manual mode."
  },
  {
    "nlp": "The clinical user interface should display the description of auto mode if auto mode is selected."
  },
  {
    "nlp": "The clinical user interface should provide the ability to switch from manual mode to auto mode only if the user is logged in."
  },
  {
    "nlp": "The clinical user interface should allow to switch from auto mode to manual mode if and only if the user is logged in."
  },
  {
    "nlp": "The openenings number of the air mass balancing valve should be stored by the compact drive."
  },
  {
    "nlp": "The compact drive should count the openenings number of the air mass balancing valve."
  },
  {
    "nlp": "the compact drive software should signal an S4 type error if the start test fails"
  },
  {
    "nlp": "If the bvad mode and the left epu are in failed state the compact drive should signal an S8 type error."
  },
  {
    "nlp": "If the lvad mode and the right epu fails, the compact drive software should immediately signal an S4 type error."
  },
  {
    "nlp": "If the lvad mode is in failed state and the left epu also fails, the compact drive software should signal an S4 error."
  },
  {
    "nlp": "The compact drive software should signal an S4 type error if the rvad mode and the right epu are in failed state."
  },
  {
    "nlp": "The compact drive software should signal an S4 error if the rvad mode is in failed state and the left epu fails."
  },
  {
    "nlp": "If both pumps and cannulae are in setting, and the combination is not recommended in PCM, the user should receive a message."
  },
  {
    "nlp": "If the power supply unit is removed and the acoustic alarm is not active, the compact drive should emit an information signal."
  },
  {
    "nlp": "If the temperature of the compact drive is invalid, the compact drive software should signal a T3 alarm."
  },
  {
    "nlp": "The compact drive software should signal a T3 alarm if the temperature of the compact drive is less than 5 C"
  },
  {
    "nlp": "After the temperature of the compact drive drops below 60 C and the T2 alarm is active, the compact drive software should cancel the T2 alarm."
  },
  {
    "nlp": "If the temperature value of the flow sensors is not valid, the compact drive shall indicate an S7 error."
  }
]