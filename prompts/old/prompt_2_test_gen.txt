You will be given a list of structured requirements. Your job is to derive test cases from these requirements. The requirements are in "Language for Embedded Safety and Security" OR LESS format.  The LESS format defines safety and security requirements in a constrained natural language that strictly follows the following grammar:
1. Conditional: each requirement optionally begins with a "conditional" (optional) that starts with: "IF" or "IF NOT" or "WHILE" or "DURING" or "AFTER" or "BEFORE" or "AS SOON AS" or "IN CASE OF". This is followed by either a boolean_state_expression OR a behaviour_description: 
	a boolean_state_expression which could contain [Variables] or [Components] that can be concatenated with keyword "AND" then followed by "IN" which is again followed by an element from [States] list below; 
	a behaviour_description can begin with a transitional like "FROM" [States] and "TO" [States] or with [Variables] or a [Components] or a boolean math expression or [Errors] and may be followed by "WAS" or "IS" and then [ObjectAttribute]. The boolean math expressions are [Variables] followed by a "LESS THAN", "GREATER THAN" or "EQUAL TO" and ending with an integer or [Variables]. Multiple of these conditionals can be concatenated with "AND".	
  The conditional can end with "THEN" but is optional.	
2. multiple object attributes that describe attributes of the subject from the [ObjectAttribute] list
3. A Subject (Mandatory): The requirement specifies the specific subject it applies to. It can either be a specific subject or a set of components. These may begin with "THE", "ANY", "ALL", "SOME", "SOME SYSTEMS OF THE", which is then followed by a subject (mandatory) which could be a [Components] or [Variables] or [Errors] then may be followed by phrases like "OF", "BY USING", "FROM", "FOR", "IN", "AGAINST", "TO", "WITH", "EXCEPT FOR", "WHICH", "THAT" and end with a [Verbs]. 
4. obligation (Mandatory): The modal verb defines obligation. Only two verbs possible: "SHALL" or "SHALL NOT"
5. System Activity (Optional): This could be either provide_activity or be_able activity or a process_verb. Process_verb could only be "ENSURE", "DETECT", "SWITCH", "ALLOW", "PREVENT" OR "PREVENT FROM" OR "CHECK" or a [Verbs] from pre-defined list below. Always use the process_verb in capital letters but [Verbs] should be small letter. The provide-activity must begin with "PROVIDE" followed by [Variables] or a [Components] then followed by "WITH THE ABILITY TO" or "TO" and then followed by any of the process_verbs described above. be_able activity must begin with "BE ABLE TO" followed by any of the process_verbs described above. Multiple of these activities can be then joined by "AND" which can then be followed by a transitional like FROM [States] and TO [States].
6. object attributes(Optional): from the  [ObjectAttribute] list
7. object: This can be object or specific_object or all_object or each_object. They begin with THE, ANY, A, AN, ALL THE, or EACH. Followed by an object which could be any string or [Components] or [Variables] or [Errors] then followed by phrases like "OF", "BY USING", "FROM", "FOR", "IN", "AGAINST", "TO", "WITH", "EXCEPT FOR", "WHICH", "THAT", any may be followed by a [Verbs].
8. External Condition (Optional): Adds additional conditions at the end of the requirement. It begins with "IF AND ONLY IF" or "IF AND ONLY IF NOT" as starting phrase. This is followed by either a boolean_state_expression described above or a behaviour_description. External Condition is always before Relaxes.
9. Relaxes (Optional): Specifies when the requirement no longer applies. It starts with "UNTIL" followed by any string or "WITHIN" followed by time_interval (integer followed by time measurement unit).

The requirements in LESS only use [Variables], [Components], [Verbs], [ObjectAttribute], [States] defined below. 

Variables: [
	systolic_pressure,
	diastolic_pressure,
	default_systolic_pressure,
	default_diastolic_pressure,
	diastolic_pressure_limit,
	start_test,
	pumps,
	message,
	description,
	compact_drive_first_switch,
	combination,
	last_values,
	ability,
	default_values_for_pressure_parameters,
	last_values_manual_mode,
	openenings_number,
	temperature_value_of_the_flow_sensors,
	temperature_of_compact_drive,
	acoustic_alarm,
	information_signal
],
Verbs: [	
	start,
	pause,
	adjust,
	inform,
	display,
	count,
	signal,
	emit,
	receive,
	confirm,
	store,
	indicate,
	cancel
],
Errors: [
	s4_error,
	s8_error,
	T3_alarm,
	s7_error,
	T2_alarm
],
Components: [
	compact_drive,
	user,
	clinical_ui,
	left_epu,
	right_epu,
	compact_drive_software,
	air_mass_balancing_valve,
	cannulae,
	system,
	power_supply_unit
],
ObjectAttribute:[
	engaged,
	current,
	invalid,
	selected,
	operated
],
States: [
	is_running,
	is_stopped,
	bvad_mode,
	lvad_mode,
	rvad_mode,
	logged_in,
	manual_mode,
	auto_mode,
	failed,
	setting,
	not_recomended_in_pcm,
	authorized,
	unauthorized,
	removed,
	active
]

Convert a requirement with a state transition (specified by transitionals in LESS to the form of a test case with defined PRE and POST states). The requirement always has a formal structure described above, where antecedents and consequences are specified.

Your task is: For the requirements containing state transitions, convert this formal structure to the form of a test case. 

The antecedents are converted to PRE states, which are formatted as PRE: {[components] or [variable] or [Error]:{[States]: True or false}}. Consequences are converted to the POST states formatted as POST: {[components] or [variable] or [Error]:[States]: True or false}, and the corresponding [Components] and [Variables] are converted to the test objects.


Take reference of the below pair of requirements and corresponding test cases in json format.
Important: produce output in similar format, requirements should be followed by corresponding test cases. Do not add any extra text or note in the reply.

[
   [
      {
         "Requirement":"Req_gen0",
         "RequirementClassification":"SecurityFunctional",
         "LESS Requirement":"IF compact_drive IN failed STATE AND clinical_ui IN is_running STATE THE user SHALL SWITCH THE clinical_ui TO is_stopped"
      },
      {
         "Reference":"test-Req_gen0",
         "Requirement":"Req_gen0",
         "Testobjects":["compact_drive", "clinical_ui", "user"],
         "PRE":{"compact_drive":{"failed":true}, "clinical_ui":{"is_running":true}},
         "POST":{"clinical_ui":{"is_stopped":true}}
      }
   ],
   [
      {
         "Requirement":"Req_gen1",
         "RequirementClassification":"SecurityFunctional",
         "LESS Requirement":"WHILE bvad_mode THE system SHALL BE ABLE TO start THE right_epu IF AND ONLY IF left_epu IN is_running"
      },
      {
         "Reference":"test-Req_gen1",
         "Requirement":"Req_gen1",
         "Testobjects":["system", "left_epu", "right_epu"],
         "PRE":{"bvad_mode":true, "left_epu":{"is_running":true}},
         "POST":{}
      }
   ],
   [
      {
         "Requirement":"Req_gen2",
         "RequirementClassification":"SecurityFunctional",
         "LESS Requirement":"THE clinical_ui SHALL BE ABLE TO SWITCH FROM manual_mode TO auto_mode IF AND ONLY IF user IN logged_in"
      },
      {
         "Reference":"test-Req_gen2",
         "Requirement":"Req_gen2",
         "Testobjects":["clinical_ui", "user"],
         "PRE":{"manual_mode":true, "user":{"logged_in":true}},
         "POST":{"auto_mode":true}
      }
   ],
   [
      {
         "Requirement":"Req_gen3",
         "RequirementClassification":"SecurityFunctional",
         "LESS Requirement":"BEFORE manual_mode IS engaged THE user SHALL BE ABLE TO adjust THE default_systolic_pressure."
      },
      {
         "Reference":"test-Req_gen3",
         "Requirement":"Req_gen3",
         "Testobjects":["default_systolic_pressure","user"],
         "PRE":{},
         "POST":{}
      }
   ],
   [
      {
         "Requirement":"Req_gen5",
         "RequirementClassification":"SecurityFunctional",
         "LESS Requirement":"IF FROM manual_mode TO auto_mode THE user SHALL BE ABLE TO CHECK current diastolic_pressure"
      },
      {
         "Reference":"test-Req_gen5",
         "Requirement":"Req_gen5",
         "Testobjects":["user","diastolic_pressure"],
         "PRE":{"manual_mode":true},
         "POST":{"auto_mode":true,"manual_mode":false}
      }
   ],
   [
      {
         "Requirement":"Req_gen6",
         "RequirementClassification":"SecurityFunctional",
         "LESS Requirement":"IF manual_mode IS selected THE clinical_ui SHALL display THE description OF manual_mode"
      },
      {
         "Reference":"test-Req_gen6",
         "Requirement":"Req_gen6",
         "Testobjects":["description", "clinical_ui"],
         "PRE":{},
         "POST":{}
      }
   ],
   [
      {
         "Requirement":"Req_gen7",
         "RequirementClassification":"SecurityFunctional",
         "LESS Requirement":"IF bvad_mode AND right_epu IN failed STATE THE compact_drive SHALL signal A s8_error"
      },
      {
         "Reference":"test-Req_gen7",
         "Requirement":"Req_gen7",
         "Testobjects":["compact_drive","right_epu", "s8_error"],
         "PRE":{ "right_epu":{"failed":true},"bvad_mode":true},
         "POST":{}
      }
   ]
]

Now, generate test cases for the requirements as below:
[

            Requirement: Req_gen1
            RequirementClassification: SecurityFunctional
            {
                WHILE bvad_mode THE system SHALL BE ABLE TO pause THE left_epu IF AND ONLY IF right_epu IN is_stopped
            },
            Requirement: Req_gen2
            RequirementClassification: SecurityFunctional
            {
                THE clinical_ui SHALL BE ABLE TO SWITCH FROM auto_mode TO manual_mode IF AND ONLY IF user IN logged_in
            },
            Requirement: Req_gen3
            RequirementClassification: SecurityFunctional
            {
                BEFORE manual_mode IS engaged THE user SHALL BE ABLE TO adjust THE default_diastolic_pressure
            },
            Requirement: Req_gen4
            RequirementClassification: SecurityFunctional
            {
                BEFORE manual_mode IS engaged THE system SHALL CHECK THE default_systolic_pressure
            },
            Requirement: Req_gen5
            RequirementClassification: SecurityFunctional
            {
                BEFORE manual_mode IS engaged THE system SHALL CHECK THE default_diastolic_pressure
            },
            Requirement: Req_gen6
            RequirementClassification: SecurityFunctional
            {
                IF FROM manual_mode TO auto_mode THE user SHALL BE ABLE TO CHECK current systolic_pressure
            },
            Requirement: Req_gen7
            RequirementClassification: SecurityFunctional
            {
                IF FROM manual_mode TO auto_mode THE user SHALL BE ABLE TO adjust THE current systolic_pressure
            },
            Requirement: Req_gen8
            RequirementClassification: SecurityFunctional
            {
                IF FROM manual_mode TO auto_mode THE user SHALL BE ABLE TO adjust THE current systolic_pressure
            },
            Requirement: Req_gen9
            RequirementClassification: SecurityFunctional
            {
                IF FROM manual_mode TO auto_mode THE user SHALL BE ABLE TO adjust THE current systolic_pressure
            },
            Requirement: Req_gen10
            RequirementClassification: SecurityFunctional
            {
                IF FROM auto_mode TO manual_mode THE compact_drive SHALL PROVIDE default_values_for_pressure_parameters WITH THE ABILITY TO confirm
            },
            Requirement: Req_gen11
            RequirementClassification: SecurityFunctional
            {
                IF FROM auto_mode TO manual_mode THE compact_drive SHALL PROVIDE last_values_manual_mode WITH THE ABILITY TO confirm
            },
            Requirement: Req_gen12
            RequirementClassification: SecurityFunctional
            {
                IF auto_mode IS selected THE clinical_ui SHALL display THE description OF auto_mode
            },
            Requirement: Req_gen14
            RequirementClassification: SecurityFunctional
            {
                THE clinical_ui SHALL BE ABLE TO SWITCH FROM auto_mode TO manual_mode IF AND ONLY IF user IN logged_in
            },
            Requirement: Req_gen15
            RequirementClassification: SecurityFunctional
            {
                THE compact_drive SHALL store THE openenings_number OF air_mass_balancing_valve
            },
            Requirement: Req_gen16
            RequirementClassification: SecurityFunctional
            {
                THE compact_drive SHALL count THE openenings_number OF air_mass_balancing_valve
            },
            Requirement: Req_gen17
            RequirementClassification: SecurityFunctional
            {
                IF start_test IN failed THE compact_drive_software SHALL signal A s4_error
            },
            Requirement: Req_gen18
            RequirementClassification: SecurityFunctional
            {
                IF bvad_mode AND left_epu IN failed STATE THE compact_drive SHALL signal A s8_error
            },
            Requirement: Req_gen19
            RequirementClassification: SecurityFunctional
            {
                IF lvad_mode AND right_epu IN failed STATE THE compact_drive_software SHALL signal A s4_error
            },
            Requirement: Req_gen20
            RequirementClassification: SecurityFunctional
            {
                IF lvad_mode IN failed STATE AND left_epu IN failed STATE THE compact_drive_software SHALL signal A s4_error
            },
            Requirement: Req_gen21
            RequirementClassification: SecurityFunctional
            {
                IF rvad_mode AND right_epu IN failed STATE THE compact_drive_software SHALL signal A s4_error
            },
            Requirement: Req_gen22
            RequirementClassification: SecurityFunctional
            {
                IF rvad_mode IN failed STATE AND left_epu IN failed STATE THE compact_drive_software SHALL signal A s4_error
            },
            Requirement: Req_gen23
            RequirementClassification: SecurityFunctional
            {
                IF pumps AND cannulae IN setting AND combination IN not_recomended_in_pcm THE user SHALL receive A message
            },
            Requirement: Req_gen26
            RequirementClassification: SecurityFunctional
            {
                IF temperature_of_compact_drive LESS THAN 5 THE compact_drive_software SHALL signal A T3_alarm
            },
            Requirement: Req_gen27
            RequirementClassification: SecurityFunctional
            {
                AFTER temperature_of_compact_drive LESS THAN 60 AND T2_alarm IN active THE compact_drive_software SHALL cancel THE T2_alarm
            }
]
